import tensorflow as tf
import numpy as np
import cv2
import matplotlib.pyplot as plt
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Conv2D, MaxPooling2D, Flatten, Dense, Dropout
from tensorflow.keras.preprocessing.image import ImageDataGenerator
from tensorflow.keras.regularizers import l2
from tensorflow.keras.callbacks import EarlyStopping, ReduceLROnPlateau
from tkinter import Tk
from tkinter.filedialog import askopenfilename

# âœ… Load & Preprocess Dataset
(X_train, y_train), (X_test, y_test) = tf.keras.datasets.mnist.load_data()
X_train, X_test = X_train / 255.0, X_test / 255.0  # Normalize
X_train = X_train.reshape(-1, 28, 28, 1)
X_test = X_test.reshape(-1, 28, 28, 1)
num_classes = 10
y_train = tf.keras.utils.to_categorical(y_train, num_classes)
y_test = tf.keras.utils.to_categorical(y_test, num_classes)

# âœ… Model Architecture
model = Sequential([
    Conv2D(32, (3,3), activation='relu', kernel_regularizer=l2(0.001), input_shape=(28,28,1)),
    MaxPooling2D(pool_size=(2,2)),

    Conv2D(64, (3,3), activation='relu', kernel_regularizer=l2(0.001)),
    MaxPooling2D(pool_size=(2,2)),

    Flatten(),
    Dense(128, activation='relu', kernel_regularizer=l2(0.001)),
    Dropout(0.5),
    Dense(num_classes, activation='softmax')
])

# âœ… Compile Model
model.compile(optimizer='adam', loss='categorical_crossentropy', metrics=['accuracy'])

# âœ… Train the Model (Suppress Output)
early_stopping = EarlyStopping(monitor='val_loss', patience=5, restore_best_weights=True)
lr_scheduler = ReduceLROnPlateau(monitor='val_loss', factor=0.5, patience=3, verbose=0)

model.fit(X_train, y_train, epochs=20, validation_data=(X_test, y_test), verbose=0, callbacks=[early_stopping, lr_scheduler])

# âœ… User Input Function (Image Upload & Prediction)
def predict_digit():
    Tk().withdraw()  # Hide GUI
    file_path = askopenfilename(title="Select an Image of a Digit", filetypes=[("Image Files", "*.png;*.jpg;*.jpeg")])
    
    if file_path:
        img = cv2.imread(file_path, cv2.IMREAD_GRAYSCALE)  # Read in grayscale
        img = cv2.resize(img, (28, 28))  # Resize to 28x28
        img = img / 255.0  # Normalize
        img = img.reshape(1, 28, 28, 1)  # Reshape for model

        # Predict
        prediction = model.predict(img, verbose=0)
        predicted_digit = np.argmax(prediction)

        # Show Image & Prediction
        plt.imshow(img.reshape(28, 28), cmap="gray")
        plt.title(f"Predicted Digit: {predicted_digit}")
        plt.axis("off")
        plt.show()

        print(f"\nðŸ”¹ The model predicts: {predicted_digit}")

# âœ… Run User Input Function
predict_digit()
