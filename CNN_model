import tensorflow as tf
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Conv2D, MaxPooling2D, Flatten, Dense, Dropout
from tensorflow.keras.preprocessing.image import ImageDataGenerator
from tensorflow.keras.regularizers import l2
from tensorflow.keras.callbacks import EarlyStopping, ReduceLROnPlateau

# âœ… Data Augmentation (Stronger to Prevent Overfitting)
datagen = ImageDataGenerator(
    rotation_range=20,  
    zoom_range=0.2,  
    width_shift_range=0.2,
    height_shift_range=0.2,
    horizontal_flip=True
)

# âœ… Load & Preprocess Dataset
(X_train, y_train), (X_test, y_test) = tf.keras.datasets.mnist.load_data()

# Normalize Pixel Values (0-1 range)
X_train, X_test = X_train / 255.0, X_test / 255.0

# Reshape Data (Add Channel Dimension)
X_train = X_train.reshape(-1, 28, 28, 1)
X_test = X_test.reshape(-1, 28, 28, 1)

# One-Hot Encode Labels
num_classes = 10
y_train = tf.keras.utils.to_categorical(y_train, num_classes)
y_test = tf.keras.utils.to_categorical(y_test, num_classes)

# âœ… Model Architecture (Dropout & L2 Regularization to Reduce Overfitting)
model = Sequential([
    Conv2D(32, (3,3), activation='relu', kernel_regularizer=l2(0.001), input_shape=(28,28,1)),
    MaxPooling2D(pool_size=(2,2)),

    Conv2D(64, (3,3), activation='relu', kernel_regularizer=l2(0.001)),
    MaxPooling2D(pool_size=(2,2)),

    Flatten(),
    Dense(128, activation='relu', kernel_regularizer=l2(0.001)),
    Dropout(0.5),  # Increased Dropout to Prevent Overfitting
    Dense(num_classes, activation='softmax')
])

# âœ… Compile Model
model.compile(optimizer='adam', loss='categorical_crossentropy', metrics=['accuracy'])

# âœ… Early Stopping & Learning Rate Scheduling
early_stopping = EarlyStopping(monitor='val_loss', patience=5, restore_best_weights=True)
lr_scheduler = ReduceLROnPlateau(monitor='val_loss', factor=0.5, patience=3, verbose=1)

# âœ… Train the Model
model.fit(datagen.flow(X_train, y_train, batch_size=32),
          epochs=20, validation_data=(X_test, y_test),
          callbacks=[early_stopping, lr_scheduler])

# âœ… Evaluate Model
test_loss, test_acc = model.evaluate(X_test, y_test, verbose=2)
print(f"\nðŸ”¹ Model Test Accuracy: {test_acc:.4f}")
